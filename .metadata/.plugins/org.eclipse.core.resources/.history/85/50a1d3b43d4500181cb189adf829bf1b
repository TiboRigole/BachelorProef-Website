package controller;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.net.URL;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.EJB;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.bean.ViewScoped;
import javax.faces.component.html.HtmlInputHidden;
import javax.faces.context.FacesContext;
import javax.faces.event.PhaseId;
import javax.imageio.ImageIO;
import javax.inject.Named;

import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.primefaces.model.UploadedFile;
import org.primefaces.util.Base64;

import ejb.PandManagementEJBLocal;
import entities.Pand;

@SessionScoped
@Named("imageBean")
@ManagedBean(name="imageBean")
public class ImageBean implements Serializable {
	private static final long serialVersionUID = -3737221385235612830L;
	
	@EJB
	PandManagementEJBLocal pandEJB;
	
	private UploadedFile file;
	
	private StreamedContent dbImage=new DefaultStreamedContent();
	
	private StreamedContent defaultImage;

	private String image_id;
	/**
	 * genereren streamedContent van defaultImage
	 * @return StreamedContent no image available
	 * @throws IOException
	 */
	public StreamedContent getDefaultImage() throws IOException{
		
		InputStream dbStream;
		ByteArrayOutputStream baos=new ByteArrayOutputStream(1000);
		URL url = getClass().getResource("noimage.jpg");
		BufferedImage img=ImageIO.read(new File(url.getPath()));
		ImageIO.write(img, "jpg", baos);
		baos.flush();
 
		byte[] bytearray=baos.toByteArray();
		baos.close();
 
		dbStream= new ByteArrayInputStream (bytearray);
		dbImage = new DefaultStreamedContent(dbStream, "image/jpeg");
		return dbImage;
	}
	
	
	/**
	 * Aparte methode om een specifieke afbeelding op te vragen en in te laden
	 * 
	 * 
	 * @return StreamedContent voor pand bij updaten
	 * 
	 */
	public StreamedContent getFoto() {
		
		FacesContext context = FacesContext.getCurrentInstance();

        if (context.getCurrentPhaseId() == PhaseId.RENDER_RESPONSE) {
            // So, we're rendering the view. Return a stub StreamedContent so that it will generate right URL.
        	
            return new DefaultStreamedContent();
        }
        else {
            // So, browser is requesting the image. Return a real StreamedContent with the image bytess
        	
    		image_id = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get("image_id");
           
        	Long id = Long.valueOf(image_id);

        	Pand p = pandEJB.findPand(id);
        	if(p.getAfbeelding()==null){
            	
            	//hier de default afbeelding inladenS
                try {
					return getDefaultImage();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					return null;
				}
            	
        	}
        	else{
	        	byte[] image = p.getAfbeelding();
	            return new DefaultStreamedContent(new ByteArrayInputStream(image));
        	}
        }
	}
	
	public void setFile(UploadedFile file){
		this.file = file;
	}
	
	public String upload(){
		//in image_id (String) zit de waarde van het huidige pand id

    	Pand p = pandEJB.findPand(Long.valueOf(image_id));
    	
    	if(file != null){
    		System.out.println("tzit een in");
    	}
    	else{
    		System.out.println("geen foto in");
    	}
    	
    	return "openProject.faces?faces-redirect=true";
	}




	//////////////// GETTERS EN SETTERS //////////////////////////
	
	
	public StreamedContent getDbImage() {
		return dbImage;
	}

	public void setDbImage(StreamedContent dbImage) {
		this.dbImage = dbImage;
	}

	public PandManagementEJBLocal getPandEJB() {
		return pandEJB;
	}

	public void setPandEJB(PandManagementEJBLocal pandEJB) {
		this.pandEJB = pandEJB;
	}
	
	
	
}
