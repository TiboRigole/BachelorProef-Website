package controller;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.EJB;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.component.html.HtmlInputHidden;
import javax.faces.context.FacesContext;
import javax.faces.event.PhaseId;
import javax.imageio.ImageIO;
import javax.inject.Named;

import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.primefaces.util.Base64;

import ejb.PandManagementEJBLocal;
import entities.Pand;

@ApplicationScoped
@Named("imageBean")
@ManagedBean(name="imageBean")
public class ImageBean implements Serializable {
	private static final long serialVersionUID = -3737221385235612830L;
	
	@EJB
	PandManagementEJBLocal pandEJB;
	
	
	private StreamedContent dbImage=new DefaultStreamedContent();
	
	// map idPand - afbeelding
	private Map<Long, StreamedContent> images= new HashMap<>();

	private StreamedContent defaultImage;

	
	//setup hashmap
	public void foto(){
		List<Pand> panden= pandEJB.getAllePanden();
		System.out.println("aantal voorgestelde panden: "+panden.size());
		for(Pand p: panden){
			try{
				InputStream dbStream;
			if(p.getAfbeelding()!=null){
			 dbStream= new ByteArrayInputStream ( p.getAfbeelding());
			}
			else{
				ByteArrayOutputStream baos=new ByteArrayOutputStream(1000);
				URL url = getClass().getResource("noimage.jpg");
				BufferedImage img=ImageIO.read(new File(url.getPath()));
				ImageIO.write(img, "jpg", baos);
				baos.flush();
		 
				byte[] bytearray=baos.toByteArray();
				baos.close();
		 
				dbStream= new ByteArrayInputStream (bytearray);
			}
				
			dbImage = new DefaultStreamedContent(dbStream, "image/jpeg");
			images.put(p.getId(),dbImage);
			
				}
			catch(Exception e){
				 dbImage=new DefaultStreamedContent();
				 images.put(p.getId(),dbImage);
				e.printStackTrace();
			}
		}
	}
	
	
	
	
	
	/**
	 * Methode die herhaaldelijk aangeroepen wordt bij het openen van alle projecten, die afbeelding weergeeft
	 *
	 * @return StreamedContent voor pand in array van panden bij open project
	 * 
	 */
	public StreamedContent returnImage(){
		String image_id = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get("image_id");
		System.out.println("image_id "+ image_id);
		if (image_id == null) {
            defaultImage=new DefaultStreamedContent(FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream("../resources/images/favicon.png"), "image/png");
            return defaultImage; 
		}
		dbImage= images.get((long) Integer.valueOf(image_id));

		return dbImage;
	}
	
	/**
	 * Aparte methode om een specifieke afbeelding op te vragen en in te laden
	 * 
	 * 
	 * @return StreamedContent voor pand bij updaten
	 * 
	 */
	public StreamedContent getFoto() {
		
		FacesContext context = FacesContext.getCurrentInstance();

        if (context.getCurrentPhaseId() == PhaseId.RENDER_RESPONSE) {
            // So, we're rendering the view. Return a stub StreamedContent so that it will generate right URL.
        	System.out.println("kzit ier");
        	return new DefaultStreamedContent(FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream("../resources/images/favicon.png"), "image/png");
        }
        else {
            // So, browser is requesting the image. Return a real StreamedContent with the image bytess
        	
    		String image_id = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get("image_id");
            System.out.println("in intellij xxxxx" +image_id);
        	Long id = Long.valueOf(image_id);

        	Pand p = pandEJB.findPand(id);
        	if(p.getAfbeelding()==null){
            	System.out.println("aaaaaaa");
            	return new DefaultStreamedContent(FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream("../resources/images/favicon.png"), "image/png");
        	}
        	else{

        	
        	byte[] image = p.getAfbeelding();
        	System.out.println(p.getAfbeelding().toString());

            return new DefaultStreamedContent(new ByteArrayInputStream(image));
        	}
        }
		
		
		
	}

	//////////////// GETTERS EN SETTERS //////////////////////////
	
	public Map<Long, StreamedContent> getImages() {
		return images;
	}
	
	
	public void setImages(Map<Long, StreamedContent> images) {
		this.images = images;
	}

	public StreamedContent getDbImage() {
		return dbImage;
	}

	public void setDbImage(StreamedContent dbImage) {
		this.dbImage = dbImage;
	}

	public PandManagementEJBLocal getPandEJB() {
		return pandEJB;
	}

	public void setPandEJB(PandManagementEJBLocal pandEJB) {
		this.pandEJB = pandEJB;
	}
	
	
	
}
